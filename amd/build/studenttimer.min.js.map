{"version":3,"file":"studenttimer.min.js","sources":["../src/studenttimer.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Countdown time the students have for answering the question. The timer can also be stopped by the teacher.\n *\n * @module     quizaccess_tcquiz\n * @copyright  2024 Capilano University\n * @author     Tamara Dakic <tdakic@capilanou.ca>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport {get_string as getString} from 'core/str';\nimport Notification from 'core/notification';\nimport $ from 'jquery';\n\nconst Selectors = {\n    regions: {\n        timeLeft: '[data-region=\"quizaccess_tcquiz/timeleft_span\"]',\n },\n};\n\nconst registerEventListeners = (sessionid, quizid, cmid, attemptid, page, timeForQuestion, POLLING_INTERVAL) => {\n// The timer can be stoped either by the teacher or expired time -- handle both events.\n// Enough to check when the state of the quiz has changed to show results (30).\n\n    $('#responseform').on('submit', function() {\n        $('#responseformsubmit').attr('disabled', 'disabled');\n    });\n\n    // This should prevent \"Unsaved changes\" pop-up which might happen if the student typed something\n    // but didn't click submit.\n    window.addEventListener('beforeunload', function(event) {\n      event.stopImmediatePropagation();\n    });\n\n    var timeLeft = timeForQuestion; // +1 to wait for everyone?\n    var timeLeftHTML = document.querySelector(Selectors.regions.timeLeft);\n    var teacherEndedQuestion = false;\n\n    // Timer\n    var timer = setInterval(function() {\n        timeLeft--;\n        timeLeftHTML.innerHTML = timeLeft;\n        if (timeLeft <= 0 || teacherEndedQuestion) {\n          clearInterval(timer);\n          timer = null;\n          clearInterval(tecaherEndedQuestionEvent);\n          tecaherEndedQuestionEvent = null;\n          timeLeftHTML.innerHTML = 0;\n          document.goToCurrentQuizPageEvent = setInterval(async() => {\n              await goToCurrentQuizPage(sessionid, quizid, cmid, attemptid);\n          }, POLLING_INTERVAL);\n        }\n    }, 1000);\n\n    // Checks for teacher ending the question event.\n    var tecaherEndedQuestionEvent = setInterval(async function() {\n      teacherEndedQuestion = await checkQuestionState(sessionid, quizid, cmid, attemptid);\n    }, POLLING_INTERVAL); // 1000 means 1 sec\n\n};\n\n/**\n * Checks if the teacher stopped the question\n * @param {sessionid} sessionid The id of the current session.\n * @param {quizid} quizid The quizid of the current quiz.\n * @param {cmid} cmid Course module id of the current quiz.\n * @param {attemptid} attemptid The attemptid of the teacher's attempt.\n * @return {boolean} - true if the question was stopped by the teacher, false otherwise\n */\nasync function checkQuestionState(sessionid, quizid, cmid, attemptid) {\n\n  var result = await fetch(M.cfg.wwwroot + '/mod/quiz/accessrule/tcquiz/get_question_state.php?quizid='\n    + quizid + '&sessionid=' + sessionid + '&cmid=' + cmid + '&attempt=' + attemptid\n    + '&sesskey=' + M.cfg.sesskey, {method: 'POST'});\n\n  var responseXMLText = await result.text();\n\n  return responseXMLText == \"0\";\n\n}\n\n/**\n * When time is up or the teacher stopped the question, go to the next page of the quiz.\n * That page should only be the result's page or the final result's page\n * but the method is coded more generally in case of teacher control improvements\n * @param {sessionid} sessionid The id of the current session.\n * @param {quizid} quizid The quizid of the current quiz.\n * @param {cmid} cmid Course module id of the current quiz.\n * @param {attemptid} attemptid The attemptid of the teacher's attempt.\n */\nasync function goToCurrentQuizPage(sessionid, quizid, cmid, attemptid) {\n\n  var result = await fetch(M.cfg.wwwroot + '/mod/quiz/accessrule/tcquiz/quizdatastudent.php?quizid='\n    + quizid + '&sessionid=' + sessionid + '&cmid=' + cmid + '&attempt=' + attemptid\n    + '&sesskey=' + M.cfg.sesskey, {method: 'POST'});\n\n  var responseXMLText = await result.text();\n\n  await updateQuizPage(responseXMLText);\n\n}\n\n/**\n * Helper function to parse a response from the server and go to the specified url.\n * same function is in waitforquestion.js - leave for now in case more events added\n * @param {string} responseXMLText The XML returned by quizdatastudent.php\n */\nfunction updateQuizPage(responseXMLText) {\n\n  const parser = new DOMParser();\n  const responseXML = parser.parseFromString(responseXMLText, 'text/html');\n\n  var quizresponse = responseXML.getElementsByTagName('tcquiz').item(0);\n\n  if (quizresponse === null) {\n    Notification.addNotification({\n        message: getString('invalidserverresponse', 'quizaccess_tcquiz'),\n        type: 'error'\n    });\n    return;\n\n  } else {\n\n    var quizstatus = quizresponse.getElementsByTagName('status').item(0).textContent;\n\n    if (quizstatus == 'showquestion') {\n\n        // You should be on this page, so do nothing\n\n    } else if (quizstatus == 'showresults') {\n\n        clearInterval(document.goToCurrentQuizPageEvent);\n        document.goToCurrentQuizPageEvent = null;\n        var resultURL = quizresponse.getElementsByTagName('url').item(0).textContent;\n        window.location.replace(resultURL);\n\n    } else if (quizstatus == 'finalresults') {\n      // This could potentially only happen if the teacher clicks through the question results very fast.\n\n      clearInterval(document.goToCurrentQuizPageEvent);\n      document.goToCurrentQuizPageEvent = null;\n      var finalResultURL = quizresponse.getElementsByTagName('url').item(0).textContent;\n      window.location.replace(finalResultURL);\n\n    } else if (quizstatus == 'quiznotrunning' || quizstatus == 'waitforquestion' || quizstatus == 'waitforresults'\n            || quizstatus == 'noaction') {\n            // Keep trying.\n\n    } else if (quizstatus == 'error') {\n      var errmsg = quizresponse.getElementsByTagName('message').item(0).textContent;\n\n      Notification.addNotification({\n          message: errmsg,\n          type: 'error'\n      });\n\n    } else {\n      Notification.addNotification({\n          message: getString('unknownserverresponse', 'quizaccess_tcquiz') + quizstatus,\n          type: 'error'\n      });\n\n    }\n  }\n\n}\n\nexport const init = (sessionid, quizid, cmid, attemptid, page, timeForQuestion, POLLING_INTERVAL) => {\n\n  registerEventListeners(sessionid, quizid, cmid, attemptid, page, timeForQuestion, POLLING_INTERVAL);\n};\n"],"names":["_interopRequireDefault","obj","__esModule","default","_notification","_jquery","Selectors","timeLeft","registerEventListeners","sessionid","quizid","cmid","attemptid","page","timeForQuestion","POLLING_INTERVAL","$","on","attr","window","addEventListener","event","stopImmediatePropagation","timeLeftHTML","document","querySelector","teacherEndedQuestion","timer","setInterval","innerHTML","clearInterval","tecaherEndedQuestionEvent","goToCurrentQuizPageEvent","async","result","fetch","M","cfg","wwwroot","sesskey","method","responseXMLText","text","responseXML","DOMParser","parseFromString","quizresponse","getElementsByTagName","item","Notification","addNotification","message","getString","type","quizstatus","textContent","resultURL","location","replace","finalResultURL","errmsg","updateQuizPage","goToCurrentQuizPage","checkQuestionState","_exports","init"],"mappings":"2IA0BuB,SAAAA,uBAAAC,YAAAA,KAAAA,IAAAC,WAAAD,KAAAE,QAAAF;;;;;;;;kFADvBG,cAAAJ,uBAAAI,eACAC,QAAAL,uBAAAK,SAEA,MAAMC,kBACO,CACLC,SAAU,mDAIZC,uBAAyBA,CAACC,UAAWC,OAAQC,KAAMC,UAAWC,KAAMC,gBAAiBC,qBAIvF,EAAAC,iBAAE,iBAAiBC,GAAG,UAAU,YAC5B,EAAAD,iBAAE,uBAAuBE,KAAK,WAAY,eAK9CC,OAAOC,iBAAiB,gBAAgB,SAASC,OAC/CA,MAAMC,8BAGR,IAAIf,SAAWO,gBACXS,aAAeC,SAASC,cAAcnB,kBAAkBC,UACxDmB,sBAAuB,EAGvBC,MAAQC,aAAY,WACpBrB,WACAgB,aAAaM,UAAYtB,UACrBA,UAAY,GAAKmB,wBACnBI,cAAcH,OACdA,MAAQ,KACRG,cAAcC,2BACdA,0BAA4B,KAC5BR,aAAaM,UAAY,EACzBL,SAASQ,yBAA2BJ,aAAYK,gBA0C1DA,eAAmCxB,UAAWC,OAAQC,KAAMC,WAE1D,IAAIsB,aAAeC,MAAMC,EAAEC,IAAIC,QAAU,0DACrC5B,OAAS,cAAgBD,UAAY,SAAWE,KAAO,YAAcC,UACrE,YAAcwB,EAAEC,IAAIE,QAAS,CAACC,OAAQ,SAEtCC,sBAAwBP,OAAOQ,aAWrC,SAAwBD,iBAEtB,MACME,aADS,IAAIC,WACQC,gBAAgBJ,gBAAiB,aAE5D,IAAIK,aAAeH,YAAYI,qBAAqB,UAAUC,KAAK,GAEnE,GAAqB,OAAjBF,aAKF,YAJAG,sBAAaC,gBAAgB,CACzBC,SAAS,EAAAC,iBAAU,wBAAyB,qBAC5CC,KAAM,UAMV,IAAIC,WAAaR,aAAaC,qBAAqB,UAAUC,KAAK,GAAGO,YAErE,GAAkB,gBAAdD,iBAIG,GAAkB,eAAdA,WAA6B,CAEpCxB,cAAcN,SAASQ,0BACvBR,SAASQ,yBAA2B,KACpC,IAAIwB,UAAYV,aAAaC,qBAAqB,OAAOC,KAAK,GAAGO,YACjEpC,OAAOsC,SAASC,QAAQF,gBAErB,GAAkB,gBAAdF,WAA8B,CAGvCxB,cAAcN,SAASQ,0BACvBR,SAASQ,yBAA2B,KACpC,IAAI2B,eAAiBb,aAAaC,qBAAqB,OAAOC,KAAK,GAAGO,YACtEpC,OAAOsC,SAASC,QAAQC,qBAEnB,GAAkB,kBAAdL,YAAgD,mBAAdA,YAAiD,kBAAdA,YACvD,YAAdA,iBAGJ,GAAkB,SAAdA,WAAuB,CAChC,IAAIM,OAASd,aAAaC,qBAAqB,WAAWC,KAAK,GAAGO,YAElEN,sBAAaC,gBAAgB,CACzBC,QAASS,OACTP,KAAM,eAIVJ,sBAAaC,gBAAgB,CACzBC,SAAS,EAAAC,iBAAU,wBAAyB,qBAAuBE,WACnED,KAAM,UA7DRQ,CAAepB,iBAjDHqB,CAAoBrD,UAAWC,OAAQC,KAAMC,UAAU,GAC9DG,qBAEN,KAGCgB,0BAA4BH,aAAYK,iBAC1CP,2BAaNO,eAAkCxB,UAAWC,OAAQC,KAAMC,WAEzD,IAAIsB,aAAeC,MAAMC,EAAEC,IAAIC,QAAU,6DACrC5B,OAAS,cAAgBD,UAAY,SAAWE,KAAO,YAAcC,UACrE,YAAcwB,EAAEC,IAAIE,QAAS,CAACC,OAAQ,SAI1C,MAA0B,WAFEN,OAAOQ,OAnBFqB,CAAmBtD,UAAWC,OAAQC,KAAMC,aACxEG,iBAAiB,EAiHtBiD,SAAAC,KAHkBA,CAACxD,UAAWC,OAAQC,KAAMC,UAAWC,KAAMC,gBAAiBC,oBAE9EP,uBAAuBC,UAAWC,OAAQC,KAAMC,UAAWC,EAAMC,gBAAiBC,iBAAiB,CACnG"}