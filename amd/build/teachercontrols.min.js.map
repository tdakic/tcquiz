{"version":3,"file":"teachercontrols.min.js","sources":["../src/teachercontrols.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Allows the teacher to control the polling of one question.\n * Currently, the teacher can only stop the question.\n *\n * @module     quizaccess_tcquiz\n * @copyright  2024 Capilano University\n * @author     Tamara Dakic <tdakic@capilanou.ca>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport Notification from 'core/notification';\nimport {get_string as getString} from 'core/str';\n\nconst Selectors = {\n    actions: {\n        endquestionButton: '[data-action=\"quizaccess_tcquiz/end-question_button\"]',\n        // For upadating teacher controls later: nextquestionButton: '[data-action=\"quizaccess_tcquiz/next-question_button\"]',\n    },\n    regions: {\n        numAnswers: '[data-region=\"quizaccess_tcquiz/numberanswers_span\"]',\n        timeLeft: '[data-region=\"quizaccess_tcquiz/timeleft_span\"]',\n },\n};\n\nconst registerEventListeners = (sessionid, quizid, cmid, attemptid, page, timeForQuestion, teacherTimer, POLLING_INTERVAL) => {\n\n  // This should prevent \"Unsaved changes\" pop-up which might happen if the teacher interacts with the\n  // question and then clicks on the End question button.\n  window.addEventListener('beforeunload', function(event) {\n    event.stopImmediatePropagation();\n  });\n\n  var timeLeftHTML = document.querySelector(Selectors.regions.timeLeft);\n  const endQuestionAction = document.querySelector(Selectors.actions.endquestionButton);\n\n  teacherTimer.onmessage = function(event) {\n      timeLeftHTML.innerHTML = event.data;\n      if (event.data == 0) {\n        // The teacher should not click on the End button if the question ended.\n        endQuestionAction.disabled = true;\n        timeLeftHTML.innerHTML = 0;\n        clearInterval(updateNumAnswersEvent);\n        updateNumAnswersEvent = null;\n        teacherTimer.terminate();\n        document.getElementById('responseform').submit();\n      }\n  };\n\n  // Handles teacher clicking on the End question button\n  endQuestionAction.addEventListener('click', async(e) => {\n        e.preventDefault();\n        endQuestionAction.disabled = true;\n        clearInterval(updateNumAnswersEvent);\n        updateNumAnswersEvent = null;\n        timeLeftHTML.innerHTML = 0;\n        teacherTimer.terminate();\n        const req = new XMLHttpRequest();\n        req.open(\"POST\", M.cfg.wwwroot +\n          '/mod/quiz/accessrule/tcquiz/change_question_state.php?sessionid=' + sessionid + '&cmid=' + cmid +\n          '&sesskey=' + M.cfg.sesskey);\n        req.send();\n\n        req.onload = () => {\n          document.getElementById('responseform').submit();\n        };\n    }, {once: true});\n\n    // Updates the number of received student answers.\n    var updateNumAnswersEvent = setInterval(async() => {\n      await updateNumberOfAnswers(sessionid, quizid, cmid, attemptid);\n    }, POLLING_INTERVAL);\n\n\n    /*  Left here to use when a better teacher controls are added - for adding next question button\n    document.addEventListener('click', async(e) => {\n            if (e.target.closest(Selectors.actions.nextquestionButton)) {\n              e.preventDefault();\n              page++;\n              clearInterval(updateNumAnswersEvent);\n              updateNumAnswersEvent = null;\n              document.querySelector(Selectors.regions.timeLeft).innerHTML = 0; //will this stop setInterval?\n\n              var  result = await fetch(M.cfg.wwwroot+'/mod/quiz/accessrule/tcquiz/quizdatateacher.php?'\n                + 'requesttype=getquestion&quizid='\n                +quizid+'&joincode='+joincode+'&cmid='+ cmid +'&attempt='+attemptid\n              +'&sessionid='+sessionid+'&rejoin=false&page='+page+'&sesskey='+ M.cfg.sesskey,{method: 'POST'});\n\n              var responseXMLText = await result.text();\n              await  parse_next_url(responseXMLText);\n\n            }\n      },{once: true} );\n    */\n\n};\n\n/**\n * Retrieves and updates the number of received student answers\n * @param {sessionid} sessionid The id of the current session.\n * @param {quizid} quizid The quizid of the current quiz.\n * @param {cmid} cmid Course module id of the current quiz.\n * @param {attemptid} attemptid The attemptid of the teacher's attempt.\n */\nasync function updateNumberOfAnswers(sessionid, quizid, cmid, attemptid) {\n\n  var result = await fetch(M.cfg.wwwroot + '/mod/quiz/accessrule/tcquiz/quizdatateacher.php?requesttype=getnumberanswers&quizid='\n    + quizid + '&sessionid=' + sessionid + '&cmid=' + cmid + '&attempt=' + attemptid\n    + '&sesskey=' + M.cfg.sesskey, {method: 'POST'});\n\n  var responseXMLText = await result.text();\n\n  await updateNumAnswersHtml(responseXMLText);\n\n}\n\n/**\n * Helper function to update the html with number of submitted answers\n * @param {string} responseXMLText\n */\nfunction updateNumAnswersHtml(responseXMLText) {\n\n  var parser = new DOMParser();\n  var responseXML = parser.parseFromString(responseXMLText, 'text/html');\n\n  var quizresponse = responseXML.getElementsByTagName('tcquiz').item(0);\n\n  var numberOfAnswers = quizresponse.getElementsByTagName('numanswers').item(0).textContent;\n  document.querySelector(Selectors.regions.numAnswers).innerHTML = numberOfAnswers;\n}\n\n/**\n * Helper function to replace the current page with the attempt page specified in the responseXMLText\n * @param {string} responseXMLText\n */\n/* For when the teacher controls are improved and the Next button is also on this page.\n function parse_next_url(responseXMLText){\n\n  var parser = new DOMParser();\n  var responseXML = parser.parseFromString(responseXMLText, 'text/html');\n\n  var quizresponse = responseXML.getElementsByTagName('tcquiz').item(0);\n  var next_url = quizresponse.getElementsByTagName('url').item(0).textContent;\n\n  window.location.replace(next_url);\n\n}*/\n\nexport const init = (sessionid, quizid, cmid, attemptid, page, timeForQuestion, POLLING_INTERVAL) => {\n\n  var teacherTimer = new Worker('./timer.js');\n\n  // Figure out how much time is left before the question closes. The question html should have been displayed since\n  // the question was started, but it might have taken time to set up the js?\n\n  const URL_Q_TIME = M.cfg.wwwroot + '/mod/quiz/accessrule/tcquiz/get_question_time_left.php?quizid='\n    + quizid + '&sessionid=' + sessionid + '&cmid=' + cmid + '&attempt=' + attemptid\n    + '&sesskey=' + M.cfg.sesskey;\n\n  fetch(URL_Q_TIME, {method: 'POST'}).then((response) => {\n          if (!response.ok) {\n            throw new Error(getString('questiontimeretriveerror', 'quizaccess_tcquiz'));\n          }\n          return response.text();\n      }).then((text) => {\n          teacherTimer.postMessage({'timeForQuestion': Math.max(0, text)});\n          return text;\n      }).catch((error) => {\n          // It is better to have the timer going then not. The teacher might ge more time than the\n          // students, but that's OK.\n          teacherTimer.postMessage({'timeForQuestion': timeForQuestion});\n          Notification.addNotification({\n            message: error,\n            type: 'error'\n          });\n      });\n\n  registerEventListeners(sessionid, quizid, cmid, attemptid, page, timeForQuestion, teacherTimer, POLLING_INTERVAL);\n};\n"],"names":["obj","_notification","__esModule","default","Selectors","actions","endquestionButton","regions","numAnswers","timeLeft","registerEventListeners","sessionid","quizid","cmid","attemptid","page","timeForQuestion","teacherTimer","POLLING_INTERVAL","window","addEventListener","event","stopImmediatePropagation","timeLeftHTML","document","querySelector","endQuestionAction","onmessage","innerHTML","data","disabled","clearInterval","updateNumAnswersEvent","terminate","getElementById","submit","async","e","preventDefault","req","XMLHttpRequest","open","M","cfg","wwwroot","sesskey","send","onload","once","setInterval","result","fetch","method","responseXMLText","text","responseXML","DOMParser","parseFromString","numberOfAnswers","getElementsByTagName","item","textContent","updateNumAnswersHtml","updateNumberOfAnswers","_exports","init","Worker","URL_Q_TIME","then","response","ok","Error","getString","postMessage","Math","max","catch","error","Notification","addNotification","message","type"],"mappings":"6HAyB6C,IAAAA;;;;;;;;;kFAA7CC,eAA6CD,IAA7CC,gBAA6CD,IAAAE,WAAAF,KAAAG,QAAAH,KAG7C,MAAMI,UAAY,CACdC,QAAS,CACLC,kBAAmB,yDAGvBC,QAAS,CACLC,WAAY,uDACZC,SAAU,oDAIZC,uBAAyBA,CAACC,UAAWC,OAAQC,KAAMC,UAAWC,KAAMC,gBAAiBC,aAAcC,oBAIvGC,OAAOC,iBAAiB,gBAAgB,SAASC,OAC/CA,MAAMC,8BAGR,IAAIC,aAAeC,SAASC,cAAcrB,UAAUG,QAAQE,UAC5D,MAAMiB,kBAAoBF,SAASC,cAAcrB,UAAUC,QAAQC,mBAEnEW,aAAaU,UAAY,SAASN,OAC9BE,aAAaK,UAAYP,MAAMQ,KACb,GAAdR,MAAMQ,OAERH,kBAAkBI,UAAW,EAC7BP,aAAaK,UAAY,EACzBG,cAAcC,uBACdA,sBAAwB,KACxBf,aAAagB,YACbT,SAASU,eAAe,gBAAgBC,WAK9CT,kBAAkBN,iBAAiB,SAASgB,UACtCC,EAAEC,iBACFZ,kBAAkBI,UAAW,EAC7BC,cAAcC,uBACdA,sBAAwB,KACxBT,aAAaK,UAAY,EACzBX,aAAagB,YACb,MAAMM,IAAM,IAAIC,eAChBD,IAAIE,KAAK,OAAQC,EAAEC,IAAIC,QACrB,mEAAqEjC,UAAY,SAAWE,KAC5F,YAAc6B,EAAEC,IAAIE,SACtBN,IAAIO,OAEJP,IAAIQ,OAAS,KACXvB,SAASU,eAAe,gBAAgBC,QAAQ,CACjD,GACF,CAACa,MAAM,IAGV,IAAIhB,sBAAwBiB,aAAYb,gBAmC5CA,eAAqCzB,UAAWC,OAAQC,KAAMC,WAE5D,IAAIoC,aAAeC,MAAMT,EAAEC,IAAIC,QAAU,uFACrChC,OAAS,cAAgBD,UAAY,SAAWE,KAAO,YAAcC,UACrE,YAAc4B,EAAEC,IAAIE,QAAS,CAACO,OAAQ,SAEtCC,sBAAwBH,OAAOI,aAUrC,SAA8BD,iBAE5B,IACIE,aADS,IAAIC,WACQC,gBAAgBJ,gBAAiB,aAItDK,gBAFeH,YAAYI,qBAAqB,UAAUC,KAAK,GAEhCD,qBAAqB,cAAcC,KAAK,GAAGC,YAC9ErC,SAASC,cAAcrB,UAAUG,QAAQC,YAAYoB,UAAY8B,gBAhB3DI,CAAqBT,iBA1CjBU,CAAsBpD,UAAWC,OAAQC,KAAMC,UAAU,GAC9DI,iBAAiB,EA2GtB8C,SAAAC,KA9BkBA,CAACtD,UAAWC,OAAQC,KAAMC,UAAWC,KAAMC,gBAAiBE,oBAE9E,IAAID,aAAe,IAAIiD,OAAO,cAK9B,MAAMC,WAAazB,EAAEC,IAAIC,QAAU,iEAC/BhC,OAAS,cAAgBD,UAAY,SAAWE,KAAO,YAAcC,UACrE,YAAc4B,EAAEC,IAAIE,QAExBM,MAAMgB,WAAY,CAACf,OAAQ,SAASgB,MAAMC,WAClC,IAAKA,SAASC,GACZ,MAAM,IAAIC,OAAM,EAAAC,iBAAU,2BAA4B,sBAExD,OAAOH,SAASf,MAAM,IACvBc,MAAMd,OACLrC,aAAawD,YAAY,CAACzD,gBAAmB0D,KAAKC,IAAI,EAAGrB,QAClDA,QACRsB,OAAOC,QAGN5D,aAAawD,YAAY,CAACzD,gBAAmBA,kBAC7C8D,sBAAaC,gBAAgB,CAC3BC,QAASH,MACTI,KAAM,SACN,IAGVvE,uBAAuBC,UAAWC,OAAQC,KAAMC,UAAWC,EAAMC,EAAiBC,aAAcC,iBAAiB,CACjH"}