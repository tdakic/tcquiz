{"version":3,"file":"waitforquestion.min.js","sources":["../src/waitforquestion.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Redirects a student to the current quiz page. Used when the student\n * joins the quiz.\n *\n * @module     quizaccess_tcquiz\n * @copyright  2024 Capilano University\n * @author     Tamara Dakic <tdakic@capilanou.ca>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport Notification from 'core/notification';\nimport {get_string as getString} from 'core/str';\n\nconst registerEventListeners = (sessionid, quizid, cmid, attemptid, POLLING_INTERVAL) => {\n  // Polling event that determines when the state of the tcquiz has changed.\n  document.goToCurrentQuizPageEvent = setInterval(async() =>{\n    await goToCurrentQuizPage(sessionid, quizid, cmid, attemptid);\n  }, POLLING_INTERVAL);\n};\n\n/**\n * Go to the current page of the quiz which is detrmined by quizdatastudent.php querrying db.\n * The page can be one of the following: attempt page, results page or final results page. This function\n * is also used when the student joins the quiz late.\n * @param {sessionid} sessionid The id of the current session.\n * @param {quizid} quizid The quizid of the current quiz.\n * @param {cmid} cmid Course module id of the current quiz.\n * @param {attemptid} attemptid The attemptid of the student's attempt.\n */\nasync function goToCurrentQuizPage(sessionid, quizid, cmid, attemptid) {\n\n  var result = await fetch(M.cfg.wwwroot + '/mod/quiz/accessrule/tcquiz/quizdatastudent.php?quizid='\n    + quizid + '&sessionid=' + sessionid + '&cmid=' + cmid + '&attempt=' + attemptid\n    + '&sesskey=' + M.cfg.sesskey, {method: 'POST'});\n\n  var responseXMLText = await result.text();\n\n  await updateQuizPage(responseXMLText);\n\n}\n\n/**\n * Helper function to parse a response from the server and go to the specified url.\n * @param {string} responseXMLText The XML returned by quizdatastudent.php\n */\nfunction updateQuizPage(responseXMLText) {\n\n        const parser = new DOMParser();\n        const responseXML = parser.parseFromString(responseXMLText, 'text/html');\n\n        var quizresponse = responseXML.getElementsByTagName('tcquiz').item(0);\n        var resultURL;\n\n        if (quizresponse === null) {\n            Notification.addNotification({\n                message: getString('invalidserverresponse', 'quizaccess_tcquiz'),\n                type: 'error'\n            });\n            return;\n\n        } else {\n\n          var quizstatus = quizresponse.getElementsByTagName('status').item(0).textContent;\n\n          if (quizstatus == 'showquestion') {\n\n            //document.goToCurrentQuizPageEvent = null;\n            clearInterval(document.goToCurrentQuizPageEvent);\n            var attemptURL = quizresponse.getElementsByTagName('url').item(0).textContent;\n            window.location.replace(attemptURL);\n\n          } else if (quizstatus == 'showresults') {\n\n            //document.goToCurrentQuizPageEvent = null;\n            clearInterval(document.goToCurrentQuizPageEvent);\n            resultURL = quizresponse.getElementsByTagName('url').item(0).textContent;\n            window.location.replace(resultURL);\n\n          } else if (quizstatus == 'finalresults') {\n             clearInterval(document.goToCurrentQuizPageEvent);\n             //document.goToCurrentQuizPageEvent = null;\n             resultURL = quizresponse.getElementsByTagName('url').item(0).textContent;\n             setTimeout(() => {\n                window.location.replace(resultURL);\n             });\n\n\n          } else if (quizstatus == 'quiznotrunning' || quizstatus == 'waitforquestion' || quizstatus == 'waitforresults' ||\n                quizstatus == 'noaction') {\n                // Keep trying.\n          } else if (quizstatus == 'error') {\n              var errmsg = quizresponse.getElementsByTagName('message').item(0).textContent;\n\n              Notification.addNotification({\n                  message: errmsg,\n                  type: 'error'\n              });\n          } else {\n              Notification.addNotification({\n                  message: getString('unknownserverresponse', 'quizaccess_tcquiz') + quizstatus,\n                  type: 'error'\n              });\n          }\n        }\n}\n\nexport const init = (sessionid, quizid, cmid, attemptid, POLLING_INTERVAL) => {\n  registerEventListeners(sessionid, quizid, cmid, attemptid, POLLING_INTERVAL);\n};\n"],"names":["obj","_notification","__esModule","default","registerEventListeners","sessionid","quizid","cmid","attemptid","POLLING_INTERVAL","document","goToCurrentQuizPageEvent","setInterval","async","result","fetch","M","cfg","wwwroot","sesskey","method","responseXMLText","text","responseXML","DOMParser","parseFromString","resultURL","quizresponse","getElementsByTagName","item","Notification","addNotification","message","getString","type","quizstatus","textContent","clearInterval","attemptURL","window","location","replace","setTimeout","errmsg","updateQuizPage","goToCurrentQuizPage","_exports","init"],"mappings":"6HAyB6C,IAAAA;;;;;;;;;kFAA7CC,eAA6CD,IAA7CC,gBAA6CD,IAAAE,WAAAF,KAAAG,QAAAH,KAG7C,MAAMI,uBAAyBA,CAACC,UAAWC,OAAQC,KAAMC,UAAWC,oBAElEC,SAASC,yBAA2BC,aAAYC,gBAclDA,eAAmCR,UAAWC,OAAQC,KAAMC,WAE1D,IAAIM,aAAeC,MAAMC,EAAEC,IAAIC,QAAU,0DACrCZ,OAAS,cAAgBD,UAAY,SAAWE,KAAO,YAAcC,UACrE,YAAcQ,EAAEC,IAAIE,QAAS,CAACC,OAAQ,SAEtCC,sBAAwBP,OAAOQ,aAUrC,SAAwBD,iBAEhB,MACME,aADS,IAAIC,WACQC,gBAAgBJ,gBAAiB,aAE5D,IACIK,UADAC,aAAeJ,YAAYK,qBAAqB,UAAUC,KAAK,GAGnE,GAAqB,OAAjBF,aAKA,YAJAG,sBAAaC,gBAAgB,CACzBC,SAAS,EAAAC,iBAAU,wBAAyB,qBAC5CC,KAAM,UAMZ,IAAIC,WAAaR,aAAaC,qBAAqB,UAAUC,KAAK,GAAGO,YAErE,GAAkB,gBAAdD,WAA8B,CAGhCE,cAAc3B,SAASC,0BACvB,IAAI2B,WAAaX,aAAaC,qBAAqB,OAAOC,KAAK,GAAGO,YAClEG,OAAOC,SAASC,QAAQH,iBAEnB,GAAkB,eAAdH,WAGTE,cAAc3B,SAASC,0BACvBe,UAAYC,aAAaC,qBAAqB,OAAOC,KAAK,GAAGO,YAC7DG,OAAOC,SAASC,QAAQf,gBAEnB,GAAkB,gBAAdS,WACRE,cAAc3B,SAASC,0BAEvBe,UAAYC,aAAaC,qBAAqB,OAAOC,KAAK,GAAGO,YAC7DM,YAAW,KACRH,OAAOC,SAASC,QAAQf,UAAU,SAIjC,GAAkB,kBAAdS,YAAgD,mBAAdA,YAAiD,kBAAdA,YAC5D,YAAdA,iBAEC,GAAkB,SAAdA,WAAuB,CAC9B,IAAIQ,OAAShB,aAAaC,qBAAqB,WAAWC,KAAK,GAAGO,YAElEN,sBAAaC,gBAAgB,CACzBC,QAASW,OACTT,KAAM,eAGVJ,sBAAaC,gBAAgB,CACzBC,SAAS,EAAAC,iBAAU,wBAAyB,qBAAuBE,WACnED,KAAM,UA/DhBU,CAAevB,iBArBbwB,CAAoBxC,UAAWC,OAAQC,KAAMC,UAAU,GAC5DC,iBAAiB,EA2FpBqC,SAAAC,KAFkBA,CAAC1C,UAAWC,OAAQC,KAAMC,UAAWC,oBACvDL,uBAAuBC,UAAWC,OAAQC,KAAMC,UAAWC,iBAAiB,CAC5E"}